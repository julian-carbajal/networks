package com.networktools;

import java.io.IOException;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

/**
 * BandwidthMonitor - Tracks network interface bandwidth usage
 * Requires JDK 9+ for getInterfaceStatistics()
 */
public class BandwidthMonitor {
    
    private Map<String, InterfaceStats> previousStats = new HashMap<>();
    private Timer timer;
    private int updateInterval = 1000; // 1 second
    
    public static void main(String[] args) {
        BandwidthMonitor monitor = new BandwidthMonitor();
        monitor.startMonitoring();
        
        // Run for a minute then stop
        try {
            Thread.sleep(60000);
            monitor.stopMonitoring();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * Start monitoring network bandwidth
     */
    public void startMonitoring() {
        // Initialize previous stats
        try {
            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
            while (interfaces.hasMoreElements()) {
                NetworkInterface networkInterface = interfaces.nextElement();
                if (!networkInterface.isUp() || networkInterface.isLoopback() || networkInterface.isVirtual()) {
                    continue;
                }
                
                String name = networkInterface.getName();
                InterfaceStats stats = getInterfaceStatistics(networkInterface);
                if (stats != null) {
                    previousStats.put(name, stats);
                }
            }
        } catch (SocketException e) {
            System.err.println("Error initializing network interfaces: " + e.getMessage());
            return;
        }
        
        // Start timer for regular updates
        timer = new Timer("BandwidthMonitor");
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                try {
                    updateStatistics();
                } catch (Exception e) {
                    System.err.println("Error updating statistics: " + e.getMessage());
                }
            }
        }, updateInterval, updateInterval);
        
        System.out.println("Bandwidth monitoring started. Update interval: " + updateInterval + "ms");
    }
    
    /**
     * Stop monitoring network bandwidth
     */
    public void stopMonitoring() {
        if (timer != null) {
            timer.cancel();
            System.out.println("Bandwidth monitoring stopped.");
        }
    }
    
    /**
     * Update network statistics
     */
    private void updateStatistics() {
        try {
            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
            System.out.println("\n--- Bandwidth Statistics at " + java.time.LocalDateTime.now() + " ---");
            
            while (interfaces.hasMoreElements()) {
                NetworkInterface networkInterface = interfaces.nextElement();
                String name = networkInterface.getName();
                
                if (!networkInterface.isUp() || networkInterface.isLoopback() || networkInterface.isVirtual()) {
                    continue;
                }
                
                InterfaceStats currentStats = getInterfaceStatistics(networkInterface);
                if (currentStats == null) continue;
                
                InterfaceStats prevStats = previousStats.get(name);
                if (prevStats != null) {
                    // Calculate bandwidth
                    long rxBytesPerSec = (currentStats.rxBytes - prevStats.rxBytes) * 1000 / updateInterval;
                    long txBytesPerSec = (currentStats.txBytes - prevStats.txBytes) * 1000 / updateInterval;
                    
                    // Display statistics
                    System.out.println("Interface: " + name + " (" + networkInterface.getDisplayName() + ")");
                    System.out.println("  RX: " + formatBandwidth(rxBytesPerSec) + 
                            " (" + formatBytes(currentStats.rxBytes) + " total)");
                    System.out.println("  TX: " + formatBandwidth(txBytesPerSec) + 
                            " (" + formatBytes(currentStats.txBytes) + " total)");
                    System.out.println("  Packets RX/TX: " + currentStats.rxPackets + "/" + currentStats.txPackets);
                    System.out.println("  Errors RX/TX: " + currentStats.rxErrors + "/" + currentStats.txErrors);
                }
                
                // Update previous stats
                previousStats.put(name, currentStats);
            }
        } catch (SocketException e) {
            System.err.println("Error retrieving network interfaces: " + e.getMessage());
        }
    }
    
    /**
     * Get statistics for a network interface
     * @param networkInterface The network interface
     * @return InterfaceStats or null if unavailable
     */
    private InterfaceStats getInterfaceStatistics(NetworkInterface networkInterface) {
        // This is a simplified implementation that uses Runtime.exec to get interface statistics
        // On Linux, we can read from /proc/net/dev
        // On Windows, we can use netstat or Get-NetAdapter in PowerShell
        
        InterfaceStats stats = new InterfaceStats();
        String osName = System.getProperty("os.name").toLowerCase();
        String interfaceName = networkInterface.getName();
        
        try {
            Process process;
            
            if (osName.contains("linux")) {
                // On Linux, read from /proc/net/dev
                process = Runtime.getRuntime().exec("cat /proc/net/dev");
                java.io.BufferedReader reader = new java.io.BufferedReader(
                        new java.io.InputStreamReader(process.getInputStream()));
                
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.contains(interfaceName)) {
                        String[] parts = line.trim().split("\\s+");
                        // Format is typically: Interface: rx_bytes rx_packets rx_errs ... tx_bytes tx_packets tx_errs ...
                        stats.rxBytes = Long.parseLong(parts[1]);
                        stats.rxPackets = Long.parseLong(parts[2]);
                        stats.rxErrors = Long.parseLong(parts[3]);
                        stats.txBytes = Long.parseLong(parts[9]);
                        stats.txPackets = Long.parseLong(parts[10]);
                        stats.txErrors = Long.parseLong(parts[11]);
                        break;
                    }
                }
                reader.close();
                
            } else if (osName.contains("windows")) {
                // On Windows, use PowerShell to get adapter statistics
                process = Runtime.getRuntime().exec(
                        "powershell -Command \"Get-NetAdapter -Name '" + interfaceName + 
                        "' | Get-NetAdapterStatistics | Select BytesReceived, BytesSent, PacketsReceived, PacketsSent\"");
                
                java.io.BufferedReader reader = new java.io.BufferedReader(
                        new java.io.InputStreamReader(process.getInputStream()));
                
                String line;
                boolean headerRead = false;
                while ((line = reader.readLine()) != null) {
                    if (!headerRead) {
                        headerRead = true;
                        continue; // Skip header line
                    }
                    
                    if (!line.trim().isEmpty()) {
                        String[] parts = line.trim().split("\\s+");
                        stats.rxBytes = Long.parseLong(parts[0]);
                        stats.txBytes = Long.parseLong(parts[1]);
                        stats.rxPackets = Long.parseLong(parts[2]);
                        stats.txPackets = Long.parseLong(parts[3]);
                        // Windows doesn't easily expose error counts in this command
                        break;
                    }
                }
                reader.close();
                
            } else {
                // Fallback: Create random values for demonstration purposes
                stats.rxBytes = (long) (Math.random() * 1000000);
                stats.txBytes = (long) (Math.random() * 1000000);
                stats.rxPackets = (long) (Math.random() * 1000);
                stats.txPackets = (long) (Math.random() * 1000);
                stats.rxErrors = (long) (Math.random() * 10);
                stats.txErrors = (long) (Math.random() * 10);
            }
            
        } catch (IOException e) {
            System.err.println("Error getting statistics for interface " + interfaceName + ": " + e.getMessage());
            return null;
        }
        
        return stats;
    }
    
    /**
     * Format bytes to human-readable format
     * @param bytes The number of bytes
     * @return Formatted string (e.g., "1.23 MB")
     */
    private String formatBytes(long bytes) {
        if (bytes < 1024) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(1024));
        String pre = "KMGTPE".charAt(exp - 1) + "";
        return String.format("%.2f %sB", bytes / Math.pow(1024, exp), pre);
    }
    
    /**
     * Format bandwidth to human-readable format
     * @param bytesPerSec The number of bytes per second
     * @return Formatted string (e.g., "1.23 Mbps")
     */
    private String formatBandwidth(long bytesPerSec) {
        // Convert bytes to bits for traditional bandwidth representation
        long bitsPerSec = bytesPerSec * 8;
        
        if (bitsPerSec < 1000) return bitsPerSec + " bps";
        int exp = (int) (Math.log(bitsPerSec) / Math.log(1000));
        String pre = "kMGTPE".charAt(exp - 1) + "";
        return String.format("%.2f %sbps", bitsPerSec / Math.pow(1000, exp), pre);
    }
    
    /**
     * Inner class to hold network interface statistics
     */
    static class InterfaceStats {
        long rxBytes;    // Received bytes
        long txBytes;    // Transmitted bytes
        long rxPackets;  // Received packets
        long txPackets;  // Transmitted packets
        long rxErrors;   // Receive errors
        long txErrors;   // Transmit errors
    }
}
